class AveragePrecision:

	def __init__(self):
		self.TP = 0		# [true positive] разметка - true, предсказание - pos, то есть принадлежит разметке и обнаружили
		self.FN = 0		# [false negative] разметка - false, предсказание - neg, то есть не принадлежит разметке и не обнаружили

		self.t = 0.5	# [от 0.5 до 0.7] пороговое значение погрешности обнаружения объекта

		self.cd_layout = None		# txt файл с истинной разметкой
		self.cd_detection = None 	# txt файл с разметкой детектора


	def _check_intersection(self, detection, groundtruth):
		"""
		Функция проверки правильности обнаружения объекта.
		Считает долю перекрытия обнаруженного (detection, d) и размеченного (groundtruth, g) окаймляющих прямоугольников
		и сравнивает с пороговым значением t

		:param detection: Окаймляющий прямоугольник обнаружения
		:param groundtruth: Окаймляющий прямоугольник разметки
		:return: bool, ПРавильно ли обнаружен объект
		"""


	def calc_ap(self):
		"""
		Схема вычисления:
		1. Обнаруженные окаймляющие прямоугольники сортируются
		   в порядке убывания достоверности наличия в них объектов.
		2. Для каждого обнаруженного прямоугольника выполняется
		   поиск соответствия из разметки согласно условию IoU ≥ τ.
		3. Выполняется вычисление точности (Precision) и отклика (Recall).
		4. Строится зависимость точности от отклика.
		5. Вычисляется площадь под графиком построенной зависимости (AP - Average Precision).

		Предположительно разметка детектора имеет следующий вид
		0 CAR 0.77 232 128 290 168

		:return:
		"""


		pass